<?php

/**
 * @file
 * OpenEuropa Editorial Corporate Workflow module.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_menu_local_tasks_alter().
 */
function oe_editorial_corporate_workflow_menu_local_tasks_alter(&$data): void {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node instanceof NodeInterface) {
    return;
  }

  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = \Drupal::service('content_moderation.moderation_information');
  if (!$moderation_info->isModeratedEntity($node)) {
    return;
  }

  // Edit tab.
  if (!empty($data['tabs'][0]['entity.node.edit_form']['#link'])) {
    if (_oe_editorial_corporate_workflow_is_last_revision_published($node)) {
      $data['tabs'][0]['entity.node.edit_form']['#link']['title'] = t('New draft');
    }
    else {
      $data['tabs'][0]['entity.node.edit_form']['#link']['title'] = t('Edit draft');
    }
  }

  // Latest revision tab.
  if (!empty($data['tabs'][0]['content_moderation.workflows:node.latest_version_tab'])) {
    $data['tabs'][0]['content_moderation.workflows:node.latest_version_tab']['#link']['title'] = t('View draft');
  }

  // View tab.
  if (!empty($data['tabs'][0]['entity.node.canonical']['#link'])) {
    /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
    $moderation_info = \Drupal::service('content_moderation.moderation_information');
    if ($moderation_info->isDefaultRevisionPublished($node) || $moderation_info->isLiveRevision($node)) {
      $data['tabs'][0]['entity.node.canonical']['#link']['title'] = t('View published');
    }
    else {
      $data['tabs'][0]['entity.node.canonical']['#link']['title'] = t('View draft');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oe_editorial_corporate_workflow_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeInterface $node */
  $entity = $form_state->getFormObject()->getEntity();
  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = \Drupal::service('content_moderation.moderation_information');
  if ($entity instanceof NodeInterface && !$moderation_info->isModeratedEntity($entity)) {
    return;
  }

  // Enforce Draft state in forms.
  if (!empty($form['moderation_state']['widget'][0]['state']['#options'])) {
    /** @var \Drupal\workflows\WorkflowInterface $workflow */
    $workflow = $moderation_info->getWorkflowForEntity($entity);
    $options = [
      'draft' => $workflow->getTypePlugin()->getState('draft')->label(),
    ];
    // Remove access because Draft is the only option.
    $form['moderation_state']['widget'][0]['state']['#access'] = FALSE;
    $form['moderation_state']['widget'][0]['state']['#default_value'] = 'draft';

    // Exceptions for 'Published' state.
    if (_oe_editorial_corporate_workflow_is_last_revision_published($entity)) {
      // 'Expired' and 'Archived' are only available through 'Edit form'
      // and they always present together.
      if (isset($form['moderation_state']['widget'][0]['state']['#options']['expired'])) {
        $options['expired'] = $form['moderation_state']['widget'][0]['state']['#options']['expired'];
        $options['archived'] = $form['moderation_state']['widget'][0]['state']['#options']['archived'];
        $form['moderation_state']['widget'][0]['state']['#access'] = TRUE;
      }
    }

    $form['moderation_state']['widget'][0]['state']['#options'] = $options;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Make sure that the up next state is selected in the widget.
 */
function oe_editorial_corporate_workflow_form_content_moderation_entity_moderation_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = \Drupal::routeMatch()->getParameter('node');
  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = \Drupal::service('content_moderation.moderation_information');
  /** @var \Drupal\workflows\WorkflowInterface $workflow */
  $workflow = $moderation_info->getWorkflowForEntity($node);

  if (count($form['new_state']['#options']) > 1) {
    $transition = end($workflow->getTypePlugin()->getTransitionsForState($node->moderation_state->value));
    if (in_array($transition->to()->id(), array_keys($form['new_state']['#options']))) {
      $form['new_state']['#default_value'] = $transition->to()->id();
    }
  }
}

/**
 * Helper function to determine if the last revision is published.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node object.
 *
 * @return bool
 *   True if the node is published.
 */
function _oe_editorial_corporate_workflow_is_last_revision_published(NodeInterface $node): bool {
  /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
  $moderation_info = \Drupal::service('content_moderation.moderation_information');
  $storage = \Drupal::entityTypeManager()->getStorage($node->getEntityTypeId());
  $latest_revision_id = $storage->getLatestTranslationAffectedRevisionId($node->id(), $node->language()->getId());

  return $latest_revision_id !== NULL && !$moderation_info->hasPendingRevision($node) && $moderation_info->isDefaultRevisionPublished($node);
}
